train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((z$posterior), ncol=3)
plout=cbind(plout,z$class)
print(plout)
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((z$posterior))
plout=cbind(plout,z$class)
print(plout)
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
print(z)
plout = data.frame((z$posterior))
plout=cbind(plout,z$class)
print(plout)
ggplot(data=plout, aes(x = ))
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
ggplot(data=plout, aes(x = x1, y=x2, colors= 'z$class'))+geom_point()
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
source('simcoal.R')
require(class)
require(MASS)
require(ggplot2)
stop()
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
print(plout)
ggplot(data=plout, aes(x = x1, y=x2))+geom_point()
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
print(plout)
ggplot(data=plout, aes(x = X1, y = X2)) + geom_point(size = 3, colour ='z$class')
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
names(plout) = c('a','b','c')
print(plout)
ggplot(data=plout, aes(x = X1, y = X2)) + geom_point(size = 3, colour ='z$class')
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
names(plout) = c('a','b','c')
print(plout)
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(size = 3, colour ='z$class')
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
classification(alpha = i, n = n)
}
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
names(plout) = c('a','b','c')
print(plout)
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(size = 3, colour ='z$class')
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
return(p)
}
n=50
for (i in seq(1,1.999,length.out = 10)){
p=classification(alpha = i, n = n)
p
}
n=50
for (i in seq(1,1.999,length.out = 2)){
p=classification(alpha = i, n = n)
}
p
p
classification = function(alpha, n, replicate = 100){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame((test))
plout=cbind(plout,z$class)
names(plout) = c('a','b','c')
print(plout)
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
return(plout)
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n)
}
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(size = 3, colour ='z$class')
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(size = 3)
p + geom_point(aes(colour=c))
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n)
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(aes(colour=c))
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n)
p = ggplot(data=plout, aes(x = a, y = b), colors=c)
p + geom_point(aes(colour=c))
print(p)
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n)
p = ggplot(data=plout, aes(x = a, y = b))
p + geom_point(aes(colour=c))
print(p)
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n)
print(ggplot(data=plout, aes(x = a, y = b)) + geom_point(aes(colour=c)))
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n, replicate = 1000)
print(ggplot(data=plout, aes(x = a, y = b)) + geom_point(aes(colour=c)))
}
train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
tr <- sample(1:50, 25)
train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
train
test
class
class[replicate:(2*replicate)]
q
help('predict')
classification = function(alpha, n, replicate = 1000){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame(test)
plout = cbind(plout,z$class)
names(plout) = c('a','b','c')
print(which(z$class[1:replicate]=='n'))
b = (length(which(z$class[1:replicate]=='n'))+length(z$class[replicate:(2*replicate)]=='b'))*100/(2*replicate)
print(b)
return(plout)
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n, replicate = 1000)
print(ggplot(data=plout, aes(x = a, y = b)) + geom_point(aes(colour=c)))
}
tr <- sample(1:50, 25)
train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
test <- rbind(iris3[-tr,,1], iris3[-tr,,2], iris3[-tr,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
z <- qda(train, cl)
predict(z,test)$class
classification = function(alpha, n, replicate = 1000){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
b = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
q = qda(train, class)
z = predict(q, test)
plout = data.frame(test)
plout = cbind(plout,z$class)
names(plout) = c('a','b','c')
print(which(z$class[1:replicate]=='n'))
b = (length(which(z$class[1:replicate]=='n'))+length(which(z$class[replicate:(2*replicate)]=='b')))*100/(2*replicate)
print(b)
return(plout)
}
n=50
for (i in seq(1,1.999,length.out = 2)){
plout=classification(alpha = i, n = n, replicate = 1000)
print(ggplot(data=plout, aes(x = a, y = b)) + geom_point(aes(colour=c)))
}
classification = function(alpha, n, replicate = 1000){
train = nvbclass(alpha = alpha, n=n, replicate = replicate)
test = nvbclass(alpha = alpha, n=n, replicate = replicate)
train = matrix(train, ncol=2)
test = matrix(test, ncol=2)
class = factor(c(rep('n',replicate),rep('b',replicate)))
a = knn(train = train, test = test, cl = class, k = 1)
predknn = (length(which(a[1:replicate]=='n'))+length(which(a[replicate:(2*replicate)]=='b')))*100/(2*replicate)
plknn = cbind(data.frame(test), a)
names(plknn) = c('a','b','c')
q = qda(train, class)
z = predict(q, test)
plqda = cbind(data.frame(test), z$class)
names(plqda) = c('a','b','c')
predqda = (length(which(z$class[1:replicate]=='n'))+length(which(z$class[replicate:(2*replicate)]=='b')))*100/(2*replicate)
return(list(predknn,predqda,plknn,plqda))
}
n=50
for (i in seq(1,1.9,length.out = 4)){
plout=classification(alpha = i, n = n, replicate = 1000)
print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
}
results = data.frame(accuracy = rep(0,(2*step)),
cl = c(rep('knn',step),rep('qda',rep)))
step = 4
results
results = data.frame(accuracy = rep(0,(2*step)),
cl = c(rep('knn',step),rep('qda',rep)))
results = data.frame(accuracy = numeric(rep(0,(2*step))),
cl = character(c(rep('knn',step),rep('qda',rep))))
2*step
results = data.frame(accuracy = numeric(rep(0, 2*step)),
cl = character(c(rep('knn',step),rep('qda',rep))))
results = data.frame(accuracy = numeric(rep(0, step*2)),
cl = character(c(rep('knn',step),rep('qda',rep))))
results = data.frame(accuracy = numeric(rep(0, step+ste^p)),
cl = character(c(rep('knn',step),rep('qda',rep))))
results = data.frame(accuracy = numeric(rep(0, step+step)),
cl = character(c(rep('knn',step),rep('qda',rep))))
results = data.frame(accuracy = numeric(rep(0, step*2)),
cl = character(c(rep('knn',step),rep('qda',rep))))
step = numeric(4)
results = data.frame(accuracy = numeric(rep(0, step*2)),
cl = character(c(rep('knn',step),rep('qda',rep))))
step
step = 4
results = data.frame(accuracy = numeric(rep(0, step*2)),
cl = character(c(rep('knn',step),rep('qda',rep))))
results = data.frame(accuracy = numeric(rep(0, step*2)),
cl = character(c(rep('knn',step),rep('qda',step))))
results = data.frame(accuracy = numeric(rep(0, times = step*2)),
cl = character(c(rep('knn',step),rep('qda',step))))
results = data.frame(accuracy = rep(0, times = step*2),
cl = c(rep('knn',step),rep('qda',step)))
results
results = data.frame(accuracy = rep(c(0,0), times = step),
cl = c(rep('knn',step),rep('qda',step)))
results
vecalpha = seq(1,1.9,length.out = step)
a = seq(1,1.9,length.out = step)
results
results
results = data.frame(accuracy = rep(0, times = step*2),
cl = c(rep('knn',step),rep('qda',step)),
alpha = rep(vecalpha,2))
results
n=50
step = 4
vecalpha = seq(1,1.9,length.out = step)
results = data.frame(accuracy = rep(0, times = step*2),
cl = c(rep('knn',step),rep('qda',step)),
alpha = rep(vecalpha,2))
for (i in 1:step){
plout=classification(alpha = vecalpha[i], n = n, replicate = 1000)
#print(ggplot(data=plout[[3]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
#print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
results$accuracy[i] = plout[[1]]
results$accuracy[i+step] = plout[[2]]
}
ggplot(data = results(x = alpha, y = accuracy)) + geom_point(aes(colour=cl))
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(colour=cl))
n=50
step = 4
vecalpha = seq(1,1.9,length.out = step)
vecn = seq(10:200,length.out = step)
vecn = seq(10,200,length.out = step)
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(vecn,each = 2*step))
results
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(rep(vecn,each = step),2))
results
vecn = seq(10,50,length.out = step)
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(rep(vecn,each = step),2))
results
n=50
step = 4
vecalpha = seq(1,1.9,length.out = step)
vecn = seq(10,50,length.out = step)
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(rep(vecn,each = step),2))
for (n in 1:step){
for (i in 1:step){
plout=classification(alpha = vecalpha[i], n = vecn[n], replicate = 1000)
#print(ggplot(data=plout[[3]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
#print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
results$accuracy[i+(n-1)*step] = plout[[1]]
results$accuracy[i+(step*step)+(n-1)*step] = plout[[2]]
}
}
for (n in 1:step){
for (i in 1:step){
plout=classification(alpha = vecalpha[i], n = round(vecn[n]), replicate = 1000)
#print(ggplot(data=plout[[3]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
#print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
results$accuracy[i+(n-1)*step] = plout[[1]]
results$accuracy[i+(step*step)+(n-1)*step] = plout[[2]]
}
}
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(colour=cl, shape = n))
results
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(colour=cl, shape = n))
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(colour=cl, shape = as.character(n)))
n=50
step = 10
vecalpha = seq(1,1.9,length.out = step)
vecn = seq(10,200,length.out = step)
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(rep(vecn,each = step),2))
for (n in 1:step){
for (i in 1:step){
plout=classification(alpha = vecalpha[i], n = round(vecn[n]), replicate = 100)
#print(ggplot(data=plout[[3]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
#print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
results$accuracy[i+(n-1)*step] = plout[[1]]
results$accuracy[i+(step*step)+(n-1)*step] = plout[[2]]
}
}
n=50
step = 10
vecalpha = seq(1,1.9,length.out = step)
vecn = seq(10,200,length.out = step)
results = data.frame(accuracy = rep(0, times = step*step*2),
cl = c(rep('knn',step*step),rep('qda',step*step)),
alpha = rep(vecalpha,2*step),
n = rep(rep(vecn,each = step),2))
for (n in 1:step){
for (i in 1:step){
plout=classification(alpha = vecalpha[i], n = round(vecn[n]), replicate = 100)
#print(ggplot(data=plout[[3]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
#print(ggplot(data=plout[[4]], aes(x = a, y = b)) + geom_point(aes(colour=c)))
results$accuracy[i+(n-1)*step] = plout[[1]]
results$accuracy[i+(step*step)+(n-1)*step] = plout[[2]]
print(n*10+i)
}
}
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(colour=cl, shape = as.character(n)))
ggplot(data = results,aes(x = alpha, y = accuracy)) + geom_point(aes(shape=cl, col = as.character(n)))
View(results)
View(results)
View(results)
write.table(results, "C:/Users/Colin/Desktop/Master thesis/projet R/git/Phase-type", sep=",")
write.table(results, "C:/Users/Colin/Desktop", sep=",")
write.table(results, "C:/Users/Colin/Desktop/Master thesis/projet R/git/Phase-type/classification.txt", sep=",")
data.frame
results
write.table(results, "C:/Users/Colin/Desktop/Master thesis/projet R/git/Phase-type/classification.txt", sep=",", row.names = F)
