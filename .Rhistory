neutraly = apply(neutral[,15:(n)],1,sum)/apply(neutral,1,sum)
MMCx = MMC[,1]/apply(MMC,1,sum)
MMCy = apply(MMC[,15:(n)],1,sum)/apply(MMC,1,sum)
plot(neutralx, neutraly)
points(MMCx, MMCy, col = 'red')
n=100
replicate = 1000
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
}
neutralx = neutral[,1]/apply(neutral,1,sum)
neutraly = apply(neutral[,15:(n)],1,sum)/apply(neutral,1,sum)
MMCx = MMC[,1]/apply(MMC,1,sum)
MMCy = apply(MMC[,15:(n)],1,sum)/apply(MMC,1,sum)
plot(neutralx, neutraly)
points(MMCx, MMCy, col = 'red')
n=10
replicate = 1000
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
}
neutralx = neutral[,1]/apply(neutral,1,sum)
neutraly = apply(neutral[,5:(n)],1,sum)/apply(neutral,1,sum)
MMCx = MMC[,1]/apply(MMC,1,sum)
MMCy = apply(MMC[,15:(n)],1,sum)/apply(MMC,1,sum)
n=10
replicate = 1000
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
}
neutralx = neutral[,1]/apply(neutral,1,sum)
neutraly = apply(neutral[,5:(n)],1,sum)/apply(neutral,1,sum)
MMCx = MMC[,1]/apply(MMC,1,sum)
MMCy = apply(MMC[,5:(n)],1,sum)/apply(MMC,1,sum)
plot(neutralx, neutraly)
points(MMCx, MMCy, col = 'red')
n=1000
replicate = 100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
}
n=1000
replicate = 100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
print(i)
}
n=200
replicate = 100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1.5)
MMC[i,] = singletondistr(sim_MMC, 10)
print(i)
}
neutralx = neutral[,1]/apply(neutral,1,sum)
neutraly = apply(neutral[,5:(n)],1,sum)/apply(neutral,1,sum)
MMCx = MMC[,1]/apply(MMC,1,sum)
MMCy = apply(MMC[,5:(n)],1,sum)/apply(MMC,1,sum)
plot(neutralx, neutraly)
points(MMCx, MMCy, col = 'red')
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
nmeanSFS = apply(nsimulationSFS,2,mean)
nmeanSFS = nmeanSFS/sum(nmeanSFS)
bmeanSFS = apply(bsimulationSFS,2,mean)
bmeanSFS = bmeanSFS/sum(bmeanSFS)
plot(nmeanSFS, type = 'l', ylab = 'mean mutation number', xlab = 'lineage size', ylim = c(0,max(q2SFS)))
lines(bmeanSFS,col='red')
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
nmeanSFS = apply(nsimulationSFS,2,mean)
nmeanSFS = nmeanSFS/sum(nmeanSFS)
bmeanSFS = apply(bsimulationSFS,2,mean)
bmeanSFS = bmeanSFS/sum(bmeanSFS)
plot(bmeanSFS, type = 'l', ylab = 'mean mutation number', xlab = 'lineage size', col='red')
lines(nmeanSFS)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,5:(n)],1,sum)/apply(nsimulationSFS,1,sum)
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,5:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,15:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,15:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size', col='red')
points(xb, yb)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size', col='red')
points(xb, yb)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.8)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,15:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,15:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size', col='red')
points(xb, yb)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1+((i-1)/replicate))
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,15:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,15:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size', col='red')
points(xb, yb)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
yn = apply(nsimulationSFS[,80:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,80:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
yn = apply(nsimulationSFS[,60:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,60:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
yn = apply(nsimulationSFS[,30:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,30:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
n=10
replicate = 10000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1+((i-1)/replicate))
bsimulationSFS[i,] = mutsim(simul)
}
n=10
replicate = 10000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1+((i-1)/replicate))
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,5:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,5:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
n=10
replicate = 10000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,5:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,5:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn, yn, ylab = 'mean mutation number', xlab = 'lineage size')
points(xb, yb, col='red')
plot(xb, yb, ylab = 'mean mutation number', xlab = 'lineage size')
plot(xb, yb, ylab = 'mean mutation number', xlab = 'lineage size')
points(xn, yn, col='red')
n=200
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,30:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,30:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
points(xb,yb)
plots(xn,yn)
plot(xn,yn)
plot(xn,yn)
points(xb,yb, col=red)
points(xb,yb, col='red')
plot(xn,yn)
points(xb,yb, col='red')
plot(xn,yn, xlim=c(0,1), ylim=c(0,1))
plot(xn,yn, xlim=c(0,1), ylim=c(0,1))
points(xb,yb, col='red')
n=200
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS[,2:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,2:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1), ylim=c(0,1))
points(xb,yb, col='red')
yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1), ylim=c(0,1))
points(xb,yb, col='red')
singletondistr = function(simultree, theta = 10){
n = ncol(simultree[[2]])
individual = rep(0, n)
for (i in 1:length(simultree[[1]])){
nconcerned = simultree[[2]][i,2]
individual[1:nconcerned] = individual[1:nconcerned]+simultree[[1]][i]
}
individual = individual/sum(individual)
individual = rpois(n,individual*theta)
return(individual)
}
n=100
replicate = 1000
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 10)
sim_MMC = bcsim(n = n, alpha = 1)
MMC[i,] = singletondistr(sim_MMC, 10)
}
neutral = apply(neutral,2,mean)
neutral = neutral/sum(neutral)
MMC = apply(MMC,2,mean)
MMC = MMC/sum(MMC)
plot(neutral, type = 'l')
lines(MMC, col = 'red')
n=100
replicate = 100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
singletondistr = function(simultree, xton = 1, theta = 10){
n = ncol(simultree[[2]])
individual = rep(0, n)
for (i in 1:length(simultree[[1]])){
nconcerned = simultree[[2]][i, xton]
individual[1:nconcerned] = individual[1:nconcerned]+simultree[[1]][i]
}
#individual = individual/sum(individual)
individual = rpois(n,individual*theta)
return(individual)
}
n=100
replicate = 100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
plot(neutral)
neutral
install.packages("rgl")
require(rgl)
require(rgl)
#  open renderer
open3d()
#  plot surfacer
rgl.surface( 1:100 , 1:100 , neutral)
#  plot surfacer
rgl.surface( 1:100 , neutral)
n=100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(rgl)
#  open renderer
open3d()
#  plot surfacer
rgl.surface(1:100, 1:100, t(neutral))
require(rgl)
#  open renderer
open3d()
#  plot surfacer
rgl.surface(1:100, 1:100, t(neutral))
require(plot3D)
install.packages("plot3D")
knitr::opts_chunk$set(echo = TRUE)
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
singletondistr = function(simultree, xton = 1, theta = 10){
n = ncol(simultree[[2]])
individual = rep(0, n)
for (i in 1:length(simultree[[1]])){
nconcerned = simultree[[2]][i, xton]
individual[1:nconcerned] = individual[1:nconcerned]+simultree[[1]][i]
}
individual = individual/sum(individual)
individual = rpois(n,individual*theta)
return(individual)
}
n=100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
n=10
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
n=10
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = bcsim(n = n, alpha=1.2)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
singletondistr = function(simultree, xton = 1, theta = 10){
n = ncol(simultree[[2]])
individual = rep(0, n)
for (i in 1:length(simultree[[1]])){
nconcerned = simultree[[2]][i, xton]
individual[1:nconcerned] = individual[1:nconcerned]+simultree[[1]][i]
}
individual = individual/sum(individual)
individual = rpois(n,individual*theta)
return(individual)
}
n=10
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = bcsim(n = n, alpha=1.2)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
singletondistr = function(simultree, xton = 1, theta = 10){
n = ncol(simultree[[2]])
individual = rep(0, n)
for (i in 1:length(simultree[[1]])){
nconcerned = simultree[[2]][i, xton]
individual[1:nconcerned] = individual[1:nconcerned]+simultree[[1]][i]
}
individual = individual/sum(individual)
#individual = rpois(n,individual*theta)
return(individual)
}
n=10
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = bcsim(n = n, alpha=1.2)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
neutral
n=100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = bcsim(n = n, alpha=1.2)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral, theta = 120)
persp3D(z = neutral[,1:10], theta = 120)
neutral
persp3D(z = neutral[1:4,1:10], theta = 120)
persp3D(z = neutral[1:5,1:5], theta = 120)
n=100
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:n){
sim_neutral = bcsim(n = n, alpha=1.2)
neutral[i,] = singletondistr(sim_neutral, i, 10)
}
require(plot3D)
persp3D(z = neutral[1:5,1:5], theta = 120)
n=100
replicate = 1000
neutral = matrix(0,ncol=n,nrow=replicate)
MMC = matrix(0,ncol=n, nrow=replicate)
for (i in 1:replicate){
sim_neutral = ncsim(n = n)
neutral[i,] = singletondistr(sim_neutral, 1, 10)
sim_MMC = bcsim(n = n, alpha = 1)
MMC[i,] = singletondistr(sim_MMC, 1, 10)
}
neutral = apply(neutral,2,mean)
neutral = neutral/sum(neutral)
MMC = apply(MMC,2,mean)
MMC = MMC/sum(MMC)
plot(neutral, type = 'l')
lines(MMC, col = 'red')
