print(i)
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
}
subT
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
print(subT)
}
T_tilde = list(Tpp = list(p,p), Tpz = list(p,z),
Tzp = list(z,p), Tzz = list(z,z))
T_tilde
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
print(subT)
}
i
WESH = list()
WESH$slip = 1
wesh
WESH
a = 'bit'
WESH$a = ouh
WESH$a = 'ouh
''
''
WESH$a = 'ouh'
WESH
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH = list(WESH, subT)
}
WESH
count = 1
WESH = NULL
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH$count = subT
count = count+1
}
WESH
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH$[[count]] = subT
count = count+1
}
WESH = NULL
T_tilde = list(list(p,p), list(p,z), list(z,p), list(z,z))
count = 1
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
new_subint_mat = WESH[[1]] + (WESH[[2]] %*% solve(diag(1,ncol(WESH[[4]]))-WESH[[4]]) %*% WESH[[3]])
WESH
WESH[[1]]
WESH[[4]]
WESH[[3]]
new_subint_mat = WESH[[1]] + (WESH[[3]] %*% solve(diag(1,ncol(WESH[[4]]))-WESH[[4]]) %*% WESH[[2]])
new_subint_mat
wesh[[1]]
WESH[[1]]
subint_mat = matrix(c(-3,0,0,0,-2,0,0,1,-1), ncol=3)
subint_mat
subint_mat = matrix(c(-3,0,0,0,-2,0,0,1,-1), ncol=3)
init_probs =c(0.6,0.2,0.2)
R = c(2,0,5)
n = length(init_probs)
setofmat = rep(list(as.list(1:n)),n)
size = R
size[which(size==0)] = 1
for (i in 1:n){
for (j in 1:n){
matij = matrix(0, nrow = size[i], ncol = size[j])
matij[size[i], 1] = subint_mat[i, j]
if(i == j){matij[-size[i],-1] <- diag(1,size[i]-1)}
print(c(i,j))
print(matij)
setofmat[[i]][[j]] = matij
}
}
p = which(R>0)
z = which(R==0)
vp = c(0,sumvec(R))
vz = c(0,sumvec(size * (as.numeric(R==0))))
WESH = NULL
T_tilde = list(list(p,p), list(p,z), list(z,p), list(z,z))
count = 1
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
new_subint_mat = WESH[[1]] + (WESH[[3]] %*% solve(diag(1,ncol(WESH[[4]]))-WESH[[4]]) %*% WESH[[2]])
new_subint_mat
WESH
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
T_tilde
combn
i = 2
i = T_tilde[[2]]
i
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
combn
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
subT
i = T_tilde[[1]]
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
combn
subT
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
subT
size
i[[2]]
i
i = T_tilde[[2]]
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
if(i[[1]]==z){subT = rbind(subT, subT)}
i[[1]]
i[[2]]
if(i[[2]]==z){subT = cbind(subT, subT)}
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
subT
if(i[[2]]==z){subT = rbind(subT, subT)}
subT
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
if(i[[1]]==z){subT = cbind(subT, subT)}
if(i[[2]]==z){subT = rbind(subT, subT)}
subT
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
if(i[[1]]==z){
subT[numrow-1+j, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
if(i[[2]]==z){
subT[numrow, numcol-1+j] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
numcol
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
if(i[[1]]==z){
subT[numrow, numcol-1+j] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
if(i[[2]]==z){
subT[numrow-1+j, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
subT
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
print(selec_combn)
if(i[[1]]==z){
subT[numrow, numcol-1+j] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
if(i[[2]]==z){
subT[numrow-1+j, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
selec_combn
numcol
numrow
j=1
selec_combn = as.vector(combn[j,])
selec_combn
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
numrow
numcol
setofmat
selec_combn
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
WESH[[count]] = subT
count = count+1
}
subT
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
WESH[[count]] = subT
count = count+1
}
subT
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
WESH = NULL
p = which(R>0)
vz = c(0,sumvec(size * (as.numeric(R==0))))
z = which(R==0)
WESH = NULL
vp = c(0,sumvec(R))
T_tilde = list(list(p,p), list(p,z), list(z,p), list(z,z))
count = 1
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
i = T_tilde[[3]]
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
combn
subint_mat
subint_mat = matrix(c(-3,0,0,3,-2,0,0,1,-1), ncol=3)
init_probs =c(0.6,0.2,0.2)
subint_mat
R = c(2,0,5)
n = length(init_probs)
setofmat = rep(list(as.list(1:n)),n)
size = R
size[which(size==0)] = 1
for (i in 1:n){
for (j in 1:n){
matij = matrix(0, nrow = size[i], ncol = size[j])
matij[size[i], 1] = subint_mat[i, j]
if(i == j){matij[-size[i],-1] <- diag(1,size[i]-1)}
print(c(i,j))
print(matij)
setofmat[[i]][[j]] = matij
}
}
p = which(R>0)
z = which(R==0)
vp = c(0,sumvec(R))
vz = c(0,sumvec(size * (as.numeric(R==0))))
WESH = NULL
T_tilde = list(list(p,p), list(p,z), list(z,p), list(z,z))
count = 1
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
new_subint_mat = WESH[[1]] + (WESH[[3]] %*% solve(diag(1,ncol(WESH[[4]]))-WESH[[4]]) %*% WESH[[2]])
new_subint_mat
WESH
new_subint_mat
subint_mat=c(-6,6,0,0;)
subint_mat=c(-6,6,0,,;)
subint_mat=matrix(c(-6,6,0,
))
subint_mat=matrix(c(-6,6,0,0,
0,-3,3,0,0
0,0,-2,2,0,
subint_mat=matrix(c(-6,6,0,0,0,-3,3,0,0,0,-2,2,0,0,0,-1),ncol=4)
subint_mat=matrix(c(-6,6,0,0,0,-3,3,0,0,0,-2,2,0,0,0,-1),ncol=4, byrow = T)
subint_
subint_mat
R = c(2,0,5,1)
init_probs =c(0.6,0.2,0.2,0)
n = length(init_probs)
setofmat = rep(list(as.list(1:n)),n)
size = R
size[which(size==0)] = 1
for (i in 1:n){
for (j in 1:n){
matij = matrix(0, nrow = size[i], ncol = size[j])
matij[size[i], 1] = subint_mat[i, j]
if(i == j){matij[-size[i],-1] <- diag(1,size[i]-1)}
print(c(i,j))
print(matij)
setofmat[[i]][[j]] = matij
}
}
p = which(R>0)
z = which(R==0)
vp = c(0,sumvec(R))
vz = c(0,sumvec(size * (as.numeric(R==0))))
WESH = NULL
T_tilde = list(list(p,p), list(p,z), list(z,p), list(z,z))
count = 1
for (i in T_tilde){
combn = as.matrix(expand.grid(i[[1]],i[[2]]))
subT = matrix(0, ncol = sum(size[i[[1]]]),
nrow = sum(size[i[[2]]]))
ifelse(i[[1]]==p, abs_pos1 <- vp, abs_pos1 <- vz)
ifelse(i[[2]]==p, abs_pos2 <- vp, abs_pos2 <- vz)
for (j in 1:nrow(combn)){
selec_combn = as.vector(combn[j,])
numrow = NULL; numcol = NULL
numcol = (abs_pos1[selec_combn[1]]+1):
(abs_pos1[selec_combn[1]+1])
numrow = (abs_pos2[selec_combn[2]]+1):
(abs_pos2[selec_combn[2]+1])
subT[numrow, numcol] = setofmat[[selec_combn[2]]][[selec_combn[1]]]
}
WESH[[count]] = subT
count = count+1
}
WESH
new_subint_mat = WESH[[1]] + (WESH[[3]] %*% solve(diag(1,ncol(WESH[[4]]))-WESH[[4]]) %*% WESH[[2]])
new_subint_mat
