Vecstates[1,] = states[1,]
vecmut = NULL
while (count < n-1){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul = function(n, theta = 1){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n-1){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n-1){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(6)
simul(6)
simul(6)
simul(6)
simul(6)
simul(6)
simul(10)
simul(10)
simul(10)
simul(10)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul(10, theta = 100)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n-1){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(6)
simul(6)
simul(6)
simul(10)
simul(10)
simul(10)
simul(10)
simul(10, 100)
simul(3, 100)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
help(nls)
BlockCountProcess(4)
simul(6)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecstates[n]
Vecstates[]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
if(sum(VecNext>0)){
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
}
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecstates[n]
Vecstates[]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
if(sum(VecNext)>0){
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
}
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
help(if)
help('if')
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecstates[n]
Vecstates[]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
if (sum(VecNext) > 0){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
}
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecstates[n]
Vecstates[]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
}
i = inext
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(2)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecstates[n]
Vecstates[]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
}
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(2)
BlockCountProcess(2)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
}
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(2)
BlockCountProcess(2)
simul(3)
BlockCountProcess(3)
simul(10)
simul(n = 10, theta = 10)
simul(n = 10, theta = 10)
simul(n = 10, theta = 10)
simul(n = 10, theta = 10)
simul(n = 10, theta = 10)
simul(n = 10, theta = 1000)
simul(n = 10, theta = 1000)
Vecmut = rpois(n = 6, lambda = (5,1,1,0,0,0))
Vecmut = rpois(n = 6, lambda = c(5,1,1,0,0,0))
Vecmut
Vecmut
Vecmut
Vecmut
Vecmut
Vecmut
Vecmut
Vecmut
Vecmut
rpois(n = 6, lambda = (5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
rpois(n = 6, lambda = c(5,1,1,0,0,0))
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
}
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6)
simul(6, 1000)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = NULL
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = Vecmut + rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
}
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6, 1000)
simul = function(n, theta = 10){
# Initialisation
states = BlockCountProcess(n)$StateSpace_Mat
Nb_states =  nrow(states)
rate = BlockCountProcess(n)$Rate_Mat
t = NULL
i = 1
count = 1 # because i will not goes just from 1 to size
Vecstates = matrix(0, nrow=n-1, ncol=n-1)
Vecstates[1,] = states[1,]
Vecmut = rep(0, n-1)
while (count < n){
lambda = rate[i, i]
t[count] = qexp(p = runif(1), rate = -lambda)
mutrate = t[count]*Vecstates[count, ]*theta/2
print(mutrate)
Vecmut = Vecmut + rpois(n = n-1, lambda = mutrate)
if (count < n-1){
VecNext = rate[i, ]/(sum(rate[i, ])-rate[i, i])
VecNext[i] = 0
inext = sample(x = 1:length(VecNext), size = 1, prob = VecNext)
Vecstates[count+1, ] = states[inext, ]
i = inext
}
count = count + 1
}
return(list(t, Vecstates, Vecmut))
}
simul(6, 1000)
simul(6, 1000)
simul(6, 1000)
simul(6, 1000)
simul(6, 1000)
theta_est = function(vecxton, xton = 1:length(vecxton)){
theta = sum(xton)/(sum(1/vecxton[which(vecxton!=0)]))
return(theta)
}
theta_est(c(2734,42,3,89,1919))
theta_est(c(5734,42,3,89,1919))
theta_est(2734,1)
theta_est = function(vecxton, xton = 1:length(vecxton)){
print(vecxton[xton]/xton)
theta = mean(vecxton[xton]/xton)
return(theta)
}
vecxton=c(12,8,2,3,1,0,0,1,0)
theta_est(vecxton)
theta_est(vecxton[3:8], 3:8)
vecxton[3:8]
theta_est = function(vecxton, xton = 1:length(vecxton)){
print(vecxton/xton)
theta = mean(vecxton/xton)
return(theta)
}
vecxton=c(12,8,2,3,1,0,0,1,0)
theta_est(vecxton)
theta_est(vecxton[3:8], 3:8)
theta_est = function(vecxton, xton = 1:length(vecxton)){
print(vecxton/xton)
theta = mean(vecxton*xton)
return(theta)
}
vecxton=c(12,8,2,3,1,0,0,1,0)
theta_est(vecxton)
theta_est(vecxton[3:8], 3:8)
theta_est = function(vecxton, xton = 1:length(vecxton)){
print(vecxton*xton)
theta = mean(vecxton*xton)
return(theta)
}
vecxton=c(12,8,2,3,1,0,0,1,0)
theta_est(vecxton)
theta_est(vecxton[3:8], 3:8)
theta_est(c(2734,42,3,89,1919))
theta_est(c(2734,42,3))
theta_est(c(2734,42))
theta_est(c(2734))
