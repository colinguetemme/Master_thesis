hist(xn, breaks = 20)
hist(xn, breaks = 50)
hist(xn, breaks = 30)
points(dgamma(seq(0,1,0.01), 5))*100
hist(xn, breaks = 30)
points(dgamma(seq(0,1,0.01), 5))*100
plots(dgamma(seq(0,1,0.01), 5))*100
plot(dgamma(seq(0,1,0.01), 5))*100
plot(dgamma(seq(0,1,0.01), 1/5))*100
plot(dgamma(seq(0,1,0.01), 1, 5))*100
plot(dgamma(seq(0,1,0.01), 1, 1/5))*100
plot(dgamma(seq(0,1,0.01), 1, 5))*100
plot(dgamma(seq(0,1,0.01), 1, 2))*100
plot(dgamma(seq(0,1,0.01), 1, 8))*100
plot(dgamma(seq(0,1,0.01), 1, 1.5))*100
plot(dgamma(seq(0,1,0.01), 1, 1))*100
plot(dgamma(seq(0,1,0.01), 8, 1))*100
plot(dgamma(seq(0,1,0.01), 4, 1))*100
plot(dgamma(seq(0,1,0.01), 3, 1))*100
plot(dgamma(seq(0,1,0.01), 2, 1))*100
plot(dgamma(seq(0,1,0.01), 1, 1))*100
plot(dgamma(seq(0,1,0.01), 1.5, 1))*100
plot(dgamma(seq(0,5,0.01), 5, 1))*100
plot(dgamma(seq(0,100,0.01), 5, 1))*100
plot(dgamma(seq(0,10,0.01), 5, 1))*100
plot(dgamma(seq(0,10,0.01), 8, 1))*100
plot(dgamma(seq(0,10,0.01), 3, 1))*100
plot(dgamma(seq(0,10,0.01), 3, 1))*10000
plot(dgamma(seq(0,10,0.01), 3, 1)*100)
hist(xn, breaks = 30)
points(dgamma(seq(0,10,0.01), 3, 1)*100)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3, 1)*100)
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3, 1)*100)
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3, 1)*500)
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*500)
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*400)
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
install.packages("class")
require(class)
knn(train)
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
test = matrix(c(xn,xb,yn,yb), ncol=2)
knn(train,test, 2)
class = c(rep('n',length(xn)),rep('b',length(xb))
)
class
knn(train,test, class)
knn(train,test, class, 2)
knn(train,test, class, 2, prob = T)
attributes(.Last.value)
a = knn(train,test, class, 2, prob = T)
a
summary(a)
```{r}
train = matrix(c(xn,xb,yn,yb), ncol=2)
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train,test, class, 2, prob = T)
summary(a)
train = matrix(c(xn,xb,yn,yb), ncol=2)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.2)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train,test, class, 2, prob = T)
summary(a)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.6)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.6)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train,test, class, 2, prob = T)
summary(a)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.8)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.8)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train,test, class, 2, prob = T)
summary(a)
a
count(c(1,2,3,4,5)>3)
length(c(1,2,3,4,5)>3)
length(which(c(1,2,3,4,5)>3))
b = length(which(a[1:1000]=='n'))
b
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.5)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.5)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train, test, class, 2, prob = T)
b = length(which(a[1:1000]=='n'))
b
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.999)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.999)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train, test, class, 2, prob = T)
b = length(which(a[1:1000]=='n'))
b
install.packages("MASS")
require('MASS')
train = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
#do the chunk above again
q = qda(train, class)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.999)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
test = matrix(c(xn,xb,yn,yb), ncol=2)
z = predict(test, class)
q
z = predict(q, test)
z
b = length(which(z$class[1:1000]=='n'))
b
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.4)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
train_qda = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
#do the chunk above again
q = qda(train_qda, class)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.4)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train, test, class, 2, prob = T)
b = length(which(a[1:1000]=='n'))
test_qda = matrix(c(xn,xb,yn,yb), ncol=2)
z = predict(q, test_qda)
b = length(which(z$class[1:1000]=='n'))
b
b = length(which(a[1:1000]=='n'))
b
a = knn(train, test, class, 5, prob = T)
b = length(which(a[1:1000]=='n'))
b
a = knn(train, test, class, 3, prob = T)
b = length(which(a[1:1000]=='n'))
b
a = knn(train, test, class, 1, prob = T)
b = length(which(a[1:1000]=='n'))
b
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.6)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
train = matrix(c(xn,xb,yn,yb), ncol=2)
train_qda = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
#do the chunk above again
q = qda(train_qda, class)
n=100
replicate = 1000
nsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
bsimulationSFS = matrix(0,ncol=n-1, nrow=replicate)
for (i in 1:replicate){
simul = ncsim(n = n)
nsimulationSFS[i,] = mutsim(simul)
}
for (i in 1:replicate){
simul = bcsim(n = n, alpha = 1.6)
bsimulationSFS[i,] = mutsim(simul)
}
xn = nsimulationSFS[,1]/apply(nsimulationSFS,1,sum)
#yn = apply(nsimulationSFS[,100:(n-1)],1,sum)/apply(nsimulationSFS,1,sum)
yn = apply(nsimulationSFS,1,sum)
xb = bsimulationSFS[,1]/apply(bsimulationSFS,1,sum)
#yb = apply(bsimulationSFS[,100:(n-1)],1,sum)/apply(bsimulationSFS,1,sum)
yb = apply(bsimulationSFS,1,sum)
plot(xn,yn, xlim=c(0,1),ylim=c(0,200))
points(xb,yb, col='red')
hist(xn, breaks = 30)
points(x = seq(0,0.6,length.out = 100),dgamma(seq(0,10,length.out = 100), 3.5, 1)*350)
#do the chunk above again
test = matrix(c(xn,xb,yn,yb), ncol=2)
class = c(rep('n',length(xn)),rep('b',length(xb)))
a = knn(train, test, class, 1, prob = T)
b = length(which(a[1:1000]=='n'))
b
test_qda = matrix(c(xn,xb,yn,yb), ncol=2)
z = predict(q, test_qda)
b = length(which(z$class[1:1000]=='n'))
b
z
q
contour_data <- expand.grid(X1 = seq(-8, 8, length = 300),
X2 = seq(-8, 8, length = 300))
require(ggplot2)
qda_predict <- data.frame(contour_data,
y = as.numeric(predict(q, contour_data)$class))
p <- ggplot(train_data, aes(x = xn, y = yn, color = y)) + geom_point()
_data
p <- ggplot(train, aes(x = xn, y = yn, color = y)) + geom_point()
train
p <- ggplot(as.dataframe(train), aes(x = xn, y = yn, color = y)) + geom_point()
p <- ggplot(dataframe(train), aes(x = xn, y = yn, color = y)) + geom_point()
p <- ggplot(data.frame(train), aes(x = xn, y = yn, color = y)) + geom_point()
p + stat_contour(aes(x = xn, y = yn, z = y), data = qda_predict)
p + stat_contour(aes(x = xn, y = yn), data = qda_predict)
p <- ggplot(data.frame(train), aes(x = xn, y = yn)) + geom_point()
p + stat_contour(aes(x = xn, y = yn), data = qda_predict)
+ ggtitle("QDA Decision Boundaries")
b
b = length(which(z$class[1:1000]=='n'))
b
b = length(which(a[1:1000]=='n'))
b
